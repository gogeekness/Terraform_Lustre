### main Lustre playbook
---
# Main Lustre Playbook

- hosts: all
  become: true
  become_user: ec2-user
  gather_facts: false
  
  #stop ansible from hanging
  any_errors_fatal: true
  #stop ansible if can not log on.
  ignore_unreachable: true

  #### set roles for playbook 
  ## update python to python3.8
  roles:
    - Set_SSh_Vars
    - Python_Up


  vars:
    data_device_name: "/dev/xvdd"  # Lust 
    lustre_device_name: "dev/xvdz" # ZFS drive for Lustre
    lustre_pool_name: "Lust_pool"
    mount_point: "/mnt/data"
    ansible_command_timeout: 60  # timeout if ansible gets stuck

  pre_tasks:
    ### Set vault file and fetch vars from it
    - name: include vault
      ansible.builtin.include_vars:
        file: Terraform_Vault

    ### Shoe the starting hostnames and IPs 
    - name: Print Public IP Address
      debug:
        msg: 
          - "Public IP of {{ inventory_hostname }} is {{ hostvars[inventory_hostname]['public_ip_address'] }}"
          - "Ansible Play hosts {{ ansible_play_hosts }}"
      ignore_errors: true

  tasks:
    # - name: Ping it 
    #   ansible.builtin.ping:

    # - name: Set SSH for client
    #   set_fact:
    #     ansible_ssh_common_args: >-
    #       -o ProxyCommand="ssh -i {{ ssh_key_location }} -tt ec2-user@{{ ec2_public_ip }}"
    #   when: inventory_hostname is match("^ec2.*")
    - name: Print SSH connection details
      debug:
        msg: "Connecting to {{ inventory_hostname }} via {{ ansible_host }} \
          using {{ ansible_ssh_common_args | default('No SSH args set')  }}"
      ignore_errors: true

    ### test access to the servers
    - name: Get Hostname via raw (bypasses Python)
      raw: uname -a
      register: hostnames

    # - name: Ping servers
    #   ansible.builtin.ping:   

    ## After updating python test to work.
    - name: show hosts
      ansible.builtin.debug:
        var: hostnames
        verbosity: 2

            ### Test raw command and gain host information
    - name: Get Hostname
      ansible.builtin.command:
        cmd: "echo $(uname -a)" 
      register: hostnames
      vars:
        ansible_python_interpreter: /usr/libexec/platform-python
        

  #   - name: Add SSH private key
  #     copy:
  #       content: "{{ lookup('env', 'SSH_PRIVATE_KEY') }}"
  #       dest: "/home/{{ ansible_user }}/.ssh/rsa.id"
  #       owner: ec2-user
  #       group: ec2-user
  #       mode: '0600'

  #   - name: Install common packages
  #     become: true
  #     become_user: root
  #     ansible.builtin.package:
  #       name: 
  #         - util-linux
  #         - xfsprogs
  #         - nano
  #         - openssh
  #       state: present
  #     async: 60
  #     poll: 60

        

  # ### set the three servers with data drives
  #   - name: Create mount points for data drives
  #     file:
  #       path: "{{ data_device_name }}"
  #       state: directory
  #       mode: '0755'
  #     with_sequence: start=1 end=3

  #   - name: Create filesystem on EBS volume
  #     filesystem:
  #       fstype: ext4
  #       dev: "{{ data_device_name }}"
  #     when: device_name is defined

  #   - name: Create mount directory
  #     file:
  #       path: "{{ mount_point }}"
  #       state: directory
  #       mode: '0755'

  #   - name: Mount EBS volume
  #     mount:
  #       path: "{{ mount_point }}"
  #       src: "{{ device_name }}"
  #       fstype: ext4
  #       state: mounted

  #   - name: Add SSH private key to point connection server
  #     copy:
  #       content: "{{ lookup('env', 'SSH_PRIVATE_KEY') }}"
  #       dest: "/home/reseke/.ssh/id_rsa"
  #       owner: rdeseke_aws1
  #       group: rdeseke_aws1
  #       mode: '0600'
  #     when: lookup('env', 'SSH_PRIVATE_KEY') is defined